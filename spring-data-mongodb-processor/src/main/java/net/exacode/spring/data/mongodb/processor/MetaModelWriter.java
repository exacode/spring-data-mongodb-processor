package net.exacode.spring.data.mongodb.processor;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.tools.Diagnostic.Kind;

import net.exacode.spring.data.mongodb.processor.model.MetaModel;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * Responsible for writing meta model from context generated by
 * {@link MetaModelGenerator}.
 * <p/>
 * This implementation uses FreeMarker library.
 * 
 * @author mendlik
 * 
 */
public class MetaModelWriter {

	private final ProcessingEnvironment processingEnv;

	private final Configuration templateConfiguration;

	private static final String META_MODEL_TEMPLATE = "SpringDataMongoDbMetaModel.ftl";

	public MetaModelWriter(ProcessingEnvironment processingEnv) {
		this.processingEnv = processingEnv;
		this.templateConfiguration = new Configuration();
		this.templateConfiguration.setClassForTemplateLoading(this.getClass(),
				"/");
	}

	public void write(MetaModel metaModel) {
		Map<String, Object> context = new HashMap<String, Object>();
		context.put("metaModel", metaModel);
		writeTemplate(context, META_MODEL_TEMPLATE, metaModel.getType()
				.getCanonicalName());
	}

	public void writeTemplate(Map<String, Object> context,
			String templateFileName, String outputFileName) {
		Filer filer = processingEnv.getFiler();
		try {
			OutputStream os = filer.createSourceFile(outputFileName)
					.openOutputStream();
			PrintWriter pw = new PrintWriter(os);

			Template template = templateConfiguration
					.getTemplate(templateFileName);
			template.process(context, pw);

			pw.close();
			os.close();
		} catch (IOException | TemplateException e) {
			processingEnv.getMessager().printMessage(
					Kind.ERROR,
					"Could not create source file for " + outputFileName + ": "
							+ e);
		}
	}
}
